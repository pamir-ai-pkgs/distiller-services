[project]
name = "distiller-services"
version = "3.0.0"
description = "Modern async WiFi provisioning system for Distiller devices"
authors = [{name = "PamirAI Incorporated", email = "support@pamir.ai"}]
readme = "README.md"
requires-python = ">=3.11"
dependencies = [
    "fastapi>=0.109.2",
    "uvicorn[standard]>=0.27.1",
    "pydantic>=2.6.1",
    "pydantic-settings>=2.1.0",
    "httpx>=0.25.0",
    "jinja2>=3.1.3",
    "pillow>=10.2.0",
    "qrcode[pil]>=7.4.2",
    "websockets>=12.0",
    "python-multipart>=0.0.9",
]

[project.scripts]
"distiller-wifi" = "distiller_wifi:main"

[project.optional-dependencies]
dev = [
    "pytest>=7.0",
    "pytest-asyncio>=0.21.0",
    "pytest-cov>=4.0",
    "ruff>=0.1.0",
    "mypy>=1.0",
    "djlint>=1.34.0",
    "yamllint>=1.33.0",
    "types-qrcode>=1.4.0",
    "types-Pillow>=10.2.0",
]

[build-system]
requires = ["setuptools>=61.0", "wheel"]
build-backend = "setuptools.build_meta"

[tool.setuptools.packages.find]
where = ["."]
include = ["core*", "services*", "network*"]

[tool.setuptools.package-data]
"*" = ["*.json", "*.toml", "*.txt", "*.md", "*.py", "*.sh", "*.html", "*.css", "*.js", "*.svg", "*.ttf"]

[tool.ruff]
line-length = 100
target-version = "py311"
lint.select = [
    "E",   # pycodestyle errors
    "W",   # pycodestyle warnings
    "F",   # pyflakes
    "I",   # isort
    "B",   # flake8-bugbear
    "C4",  # flake8-comprehensions
    "UP",  # pyupgrade
]
lint.ignore = [
    "E203",  # whitespace before ':'
    "E501",  # line too long (handled by formatter)
    "E722",  # bare `except`
]
lint.exclude = [
    ".venv",
    "build",
    "dist",
    "__pycache__",
    "*.egg-info",
    ".git",
]

[tool.ruff.format]
quote-style = "double"
indent-style = "space"
skip-magic-trailing-comma = false
line-ending = "auto"

[tool.mypy]
python_version = "3.11"
warn_return_any = true
warn_unused_configs = true
disallow_untyped_defs = false
ignore_missing_imports = true
no_strict_optional = true

[tool.pyright]
# Python version and platform
pythonVersion = "3.11"
pythonPlatform = "Linux"

# Include/exclude patterns
include = [
    "core",
    "services", 
    "distiller_wifi.py",
    "generate_eink_previews.py"
]
exclude = [
    ".venv",
    "build",
    "dist", 
    "debian",
    "__pycache__",
    "*.egg-info",
    ".git"
]

# Type checking settings
typeCheckingMode = "basic"
reportMissingImports = "error"
reportMissingTypeStubs = "warning"
reportImportCycles = "error"
reportUnusedImport = "warning"
reportUnusedClass = "warning"
reportUnusedFunction = "warning"
reportUnusedVariable = "warning"
reportDuplicateImport = "error"

# Optional member access (common with Pydantic models)
reportOptionalMemberAccess = "warning"
reportOptionalSubscript = "warning"
reportOptionalIterable = "warning"
reportOptionalContextManager = "warning"

# General type issues
reportGeneralTypeIssues = "error"
reportPropertyTypeMismatch = "error"
reportFunctionMemberAccess = "warning"
reportIncompatibleMethodOverride = "error"
reportIncompatibleVariableOverride = "error"
reportOverlappingOverloads = "error"

# Handle Any types
reportUnknownMemberType = "warning"
reportUnknownParameterType = "warning"
reportUnknownVariableType = "warning"
reportUnknownArgumentType = "warning"

# Constants and final
reportConstantRedefinition = "error"
reportInvalidStringEscapeSequence = "error"

# Disable some noisy warnings for this codebase
reportMissingParameterType = "none"  # Too noisy for existing code
reportMissingReturnType = "none"     # Too noisy for existing code
reportUnknownLambdaType = "none"     # Lambda inference issues
reportUnnecessaryTypeIgnoreComment = "warning"
