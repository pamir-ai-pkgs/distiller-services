name: Release Build

on:
  push:
    tags:
      - "v*.*.*"
  workflow_dispatch:
    inputs:
      version:
        description: "Release build"
        required: true
        type: string

env:
  DEBIAN_FRONTEND: noninteractive
  DEBFULLNAME: PamirAI Incorporated
  DEBEMAILL: founders@pamir.ai

permissions:
  contents: write
  packages: read

jobs:
  build-release:
    runs-on: ubuntu-22.04-arm

    steps:
      - name: Checkout repository
        uses: actions/checkout@08c6903cd8c0fde910a37f88322edcfb5dd907a8 # v5.0.0
        with:
          fetch-depth: 0

      - name: Extract version information
        id: version
        run: |
          if [[ "${{ github.event_name }}" == "workflow_dispatch" ]]; then
            VERSION="${{ github.event.inputs.version }}"
          elif [[ "$GITHUB_REF" == refs/tags/* ]]; then
            VERSION="${GITHUB_REF#refs/tags/}"
          else
            echo "Error: No version provided. This workflow requires either:"
            echo "  1. A git tag push (e.g., v2.0.1-1)"
            echo "  2. Manual workflow dispatch with version input"
            exit 1
          fi

          # Remove 'v' prefix if present and parse version format vX.Y.Z-A
          CLEAN_VERSION=${VERSION#v}

          # Strict version parsing - fail if format doesn't match
          if [[ "$CLEAN_VERSION" =~ ^([0-9]+\.[0-9]+\.[0-9]+)-([0-9]+)$ ]]; then
            SEMANTIC_VERSION="${BASH_REMATCH[1]}"
            DEBIAN_REVISION="${BASH_REMATCH[2]}"
          elif [[ "$CLEAN_VERSION" =~ ^([0-9]+\.[0-9]+\.[0-9]+)$ ]]; then
            SEMANTIC_VERSION="${BASH_REMATCH[1]}"
            DEBIAN_REVISION="1"
          else
            echo "Error: Invalid version format: $CLEAN_VERSION"
            echo "Expected format: X.Y.Z or X.Y.Z-R"
            echo "Examples: 2.0.1, 2.0.1-1"
            exit 1
          fi

          echo "version=${VERSION}" >> $GITHUB_OUTPUT
          echo "clean_version=${CLEAN_VERSION}" >> $GITHUB_OUTPUT
          echo "semantic_version=${SEMANTIC_VERSION}" >> $GITHUB_OUTPUT
          echo "debian_revision=${DEBIAN_REVISION}" >> $GITHUB_OUTPUT

          echo "Building version: ${VERSION}"
          echo "Clean version: ${CLEAN_VERSION}"
          echo "Semantic version: ${SEMANTIC_VERSION}"
          echo "Debian revision: ${DEBIAN_REVISION}"

      - name: Cache APT packages
        uses: actions/cache@0400d5f644dc74513175e3cd8d07132dd4860809 # v4.2.4
        with:
          path: /var/cache/apt/archives
          key: ${{ runner.os }}-apt-${{ hashFiles('debian/control') }}
          restore-keys: |
            ${{ runner.os }}-apt-

      - name: Update package lists
        run: |
          sudo apt-get update

      - name: Install build dependencies
        run: |
          sudo apt-get install -y \
            build-essential \
            debhelper \
            dh-python \
            devscripts \
            python3-all \
            python3-setuptools \
            python3-pip \
            python3-venv \
            curl \
            ca-certificates \
            pkg-config \
            fakeroot \
            dpkg-dev \
            lintian

      - name: Install uv package manager
        run: |
          curl -LsSf https://astral.sh/uv/install.sh | sh
          echo "$HOME/.cargo/bin" >> $GITHUB_PATH

      - name: Verify build environment
        run: |
          gcc --version
          python3 --version
          uv --version
          uname -m
          echo "Native ARM64 build environment ready"

      - name: Build Debian package
        run: |
          echo "Starting build process..."
          chmod +x build-deb.sh

          # Build the Debian package for ARM64
          ./build-deb.sh

          echo "Build completed. Checking artifacts:"
          ls -la dist/

      - name: Detect built package
        id: package
        run: |
          # Find the actual .deb file created
          PACKAGE_FILE=$(ls dist/*.deb 2>/dev/null | head -1)
          
          if [[ -z "$PACKAGE_FILE" ]]; then
            echo "Error: No .deb package found in dist/"
            ls -la dist/
            exit 1
          fi
          
          PACKAGE_NAME=$(basename "$PACKAGE_FILE")
          echo "Found package: $PACKAGE_NAME"
          echo "package_name=${PACKAGE_NAME}" >> $GITHUB_OUTPUT
          echo "package_path=${PACKAGE_FILE}" >> $GITHUB_OUTPUT

      - name: Verify package integrity
        run: |
          PACKAGE_PATH="${{ steps.package.outputs.package_path }}"
          
          if [[ -f "$PACKAGE_PATH" ]]; then
            echo "Package found: $PACKAGE_PATH"

            # Check package metadata
            dpkg -I "$PACKAGE_PATH"

            # Check package contents
            echo "Package contents (first 50 lines):"
            dpkg -c "$PACKAGE_PATH" | head -50

            # Verify package architecture
            ARCH=$(dpkg -f "$PACKAGE_PATH" Architecture)
            echo "Package architecture: $ARCH"

            if [[ "$ARCH" != "arm64" ]] && [[ "$ARCH" != "all" ]]; then
              echo "Error: Package architecture is not arm64 or all"
              exit 1
            fi

          else
            echo "Error: Package not found at $PACKAGE_PATH"
            echo "Available files in dist/:"
            ls -la dist/
            exit 1
          fi

      - name: Run lintian checks
        run: |
          PACKAGE_PATH="${{ steps.package.outputs.package_path }}"
          
          if [[ -f "$PACKAGE_PATH" ]]; then
            echo "Running lintian checks on $PACKAGE_PATH..."
            lintian "$PACKAGE_PATH" || echo "Lintian warnings detected (non-fatal)"
          else
            echo "Warning: Package not found for lintian check"
          fi

      - name: Upload build artifacts
        uses: actions/upload-artifact@ea165f8d65b6e75b540449e92b4886f43607fa02 # v4.6.2
        with:
          name: distiller-cm5-services-${{ steps.version.outputs.clean_version }}-arm64
          path: |
            dist/*.deb
            dist/*.changes
            dist/*.buildinfo
          retention-days: 90
          if-no-files-found: error

      - name: Create Release
        if: github.event_name == 'push' && startsWith(github.ref, 'refs/tags/')
        uses: softprops/action-gh-release@72f2c25fcb47643c292f7107632f7a47c1df5cd8 # v2.3.2
        with:
          tag_name: ${{ steps.version.outputs.version }}
          name: Release ${{ steps.version.outputs.version }}
          body: |
            # Distiller CM5 Services Release ${{ steps.version.outputs.version }}

            ## Package Information
            - **Version**: ${{ steps.version.outputs.clean_version }}
            - **Package**: ${{ steps.package.outputs.package_name }}
            - **Architecture**: ARM64 (aarch64)
            - **Target Platform**: Raspberry Pi CM5, Distiller devices

            ## Features
            - Unified async WiFi provisioning service
            - FastAPI with WebSocket real-time updates
            - Persistent mDNS advertising during network transitions
            - E-ink display support with QR codes
            - Monochrome UI optimized for e-ink displays
            - Pinggy tunnel integration for remote access
            - Session management across network changes
            - Automatic AP mode on first boot

            ## Installation
            ```bash
            # Download the .deb package
            wget https://github.com/${{ github.repository }}/releases/download/${{ steps.version.outputs.version }}/${{ steps.package.outputs.package_name }}

            # Install the package
            sudo dpkg -i ${{ steps.package.outputs.package_name }}

            # Install dependencies if needed
            sudo apt-get install -f

            # Start the service
            sudo systemctl start distiller-wifi
            sudo systemctl enable distiller-wifi

            # Check service status
            sudo systemctl status distiller-wifi
            ```

            ## Access Points
            - **WiFi AP**: Distiller-XXXX (dynamic password shown on device display)
            - **Web Interface**: http://distiller-xxxx.local:8080

            ## Requirements
            - Raspberry Pi CM5 or compatible ARM64 device
            - NetworkManager
            - Python 3.11+
            - Optional: distiller-cm5-sdk for e-ink display support

            ## Configuration
            Configuration file: `/etc/distiller/config.json`
            Logs: `/var/log/distiller/distiller-wifi.log`

            Built automatically with GitHub Actions.
          files: |
            ${{ steps.package.outputs.package_path }}
          draft: false
          prerelease: false
          generate_release_notes: true
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Build Summary
        run: |
          echo "## Build Summary" >> $GITHUB_STEP_SUMMARY
          echo "- **Version**: ${{ steps.version.outputs.version }}" >> $GITHUB_STEP_SUMMARY
          echo "- **Package**: ${{ steps.package.outputs.package_name }}" >> $GITHUB_STEP_SUMMARY
          echo "- **Architecture**: ARM64" >> $GITHUB_STEP_SUMMARY
          echo "- **Build Status**: SUCCESS" >> $GITHUB_STEP_SUMMARY

          if [[ -f "${{ steps.package.outputs.package_path }}" ]]; then
            PACKAGE_SIZE=$(du -h "${{ steps.package.outputs.package_path }}" | cut -f1)
            echo "- **Package Size**: $PACKAGE_SIZE" >> $GITHUB_STEP_SUMMARY
          fi

          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### Installation Commands" >> $GITHUB_STEP_SUMMARY
          echo '```bash' >> $GITHUB_STEP_SUMMARY
          echo "sudo dpkg -i ${{ steps.package.outputs.package_name }}" >> $GITHUB_STEP_SUMMARY
          echo "sudo apt-get install -f" >> $GITHUB_STEP_SUMMARY
          echo "sudo systemctl start distiller-wifi" >> $GITHUB_STEP_SUMMARY
          echo '```' >> $GITHUB_STEP_SUMMARY
