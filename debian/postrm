#!/bin/bash

set -e

# Log function for better debugging
log() {
    echo "[postrm] $1" >&2
}

case "$1" in
    purge)
        log "Starting purge cleanup..."
        
        # Remove wrapper scripts created in postinst
        log "Removing wrapper scripts..."
        rm -f /usr/local/bin/distiller-wifi-setup
        rm -f /usr/local/bin/distiller-tunnel
        rm -f /usr/local/bin/distiller-display
        
        # Remove permission configuration files
        log "Removing permission configuration files..."
        rm -f /etc/sudoers.d/distiller-system
        rm -f /etc/polkit-1/rules.d/50-distiller-networkmanager.rules
        rm -f /etc/udev/rules.d/99-distiller-hardware.rules
        
        # Remove virtual environment (.venv not venv)
        if [ -d /opt/distiller-cm5-services/.venv ]; then
            log "Removing virtual environment..."
            rm -rf /opt/distiller-cm5-services/.venv
        fi
        
        # Remove uv lock file
        rm -f /opt/distiller-cm5-services/uv.lock
        
        # Remove distiller user and directories on purge
        log "Removing distiller user and system directories..."
        if getent passwd distiller >/dev/null 2>&1; then
            # Check if this is the distiller user created by our package
            if [ "$(getent passwd distiller | cut -d: -f6)" = "/opt/distiller-cm5-services" ]; then
                deluser --system distiller 2>/dev/null || true
                log "Removed distiller user"
            fi
        fi
        
        # Remove system directories
        rm -rf /var/log/distiller-cm5-services
        rm -rf /etc/distiller
        
        # Remove any generated files in /opt/distiller-cm5-services
        # (but preserve fonts directory if it was manually populated)
        if [ -d /opt/distiller-cm5-services ]; then
            log "Cleaning up /opt/distiller-cm5-services..."
            
            # Remove specific PNG files created by the services
            rm -f /opt/distiller-cm5-services/wifi_info.png
            rm -f /opt/distiller-cm5-services/wifi_setup.png
            rm -f /opt/distiller-cm5-services/wifi_success.png
            rm -f /opt/distiller-cm5-services/wifi_info_tunnel.png
            
            # Remove any other generated images and logs
            rm -f /opt/distiller-cm5-services/*.png
            rm -f /opt/distiller-cm5-services/*.log
            rm -f /opt/distiller-cm5-services/*.tmp
            
            # Remove any temporary files
            find /opt/distiller-cm5-services -name "*.tmp" -delete 2>/dev/null || true
            find /opt/distiller-cm5-services -name "*.cache" -delete 2>/dev/null || true
            
            # Handle fonts directory - preserve if user has added custom fonts
            if [ -d /opt/distiller-cm5-services/fonts ]; then
                log "Checking fonts directory..."
                # Check if fonts directory has any files (excluding README.md)
                if [ -z "$(find /opt/distiller-cm5-services/fonts -type f ! -name 'README.md' 2>/dev/null)" ]; then
                    log "Removing empty fonts directory..."
                    rmdir /opt/distiller-cm5-services/fonts 2>/dev/null || true
                else
                    log "Preserving fonts directory (contains user files)"
                fi
            fi
            
            # Try to remove the main directory if empty
            if [ -z "$(ls -A /opt/distiller-cm5-services/ 2>/dev/null)" ]; then
                log "Removing empty /opt/distiller-cm5-services directory..."
                rmdir /opt/distiller-cm5-services 2>/dev/null || true
            else
                log "Preserving /opt/distiller-cm5-services (contains files)"
            fi
        fi
        
        # Clean up any potential Python cache files
        log "Cleaning up Python cache files..."
        find /opt/distiller-cm5-services -type d -name "__pycache__" -exec rm -rf {} + 2>/dev/null || true
        find /opt/distiller-cm5-services -name "*.pyc" -delete 2>/dev/null || true
        find /opt/distiller-cm5-services -name "*.pyo" -delete 2>/dev/null || true
        
        # Clean up any potential log files in system directories
        log "Cleaning up log files..."
        rm -f /var/log/distiller-cm5-services.log
        rm -f /var/log/distiller-wifi.log
        rm -f /var/log/pinggy-tunnel.log
        rm -f /var/log/mdns-service.log
        
        # Clean up any potential PID files
        log "Cleaning up PID files..."
        rm -f /var/run/distiller-cm5-services.pid
        rm -f /var/run/distiller-wifi.pid
        rm -f /var/run/pinggy-tunnel.pid
        rm -f /var/run/mdns-service.pid
        
        # Clean up any potential lock files
        log "Cleaning up lock files..."
        rm -f /var/lock/distiller-cm5-services.lock
        rm -f /var/lock/distiller-wifi.lock
        rm -f /var/lock/pinggy-tunnel.lock
        rm -f /var/lock/mdns-service.lock
        
        # Clean up any potential temporary files in /tmp
        log "Cleaning up temporary files..."
        rm -f /tmp/distiller-cm5-services-*
        rm -f /tmp/distiller-wifi-*
        rm -f /tmp/pinggy-tunnel-*
        rm -f /tmp/mdns-service-*
        
        # Clean up any potential state files
        log "Cleaning up state files..."
        rm -f /var/lib/distiller-cm5-services/state.json
        rm -f /var/lib/distiller-cm5-services/config.json
        rm -rf /var/lib/distiller-cm5-services 2>/dev/null || true
        
        # Clean up any potential cache directories
        log "Cleaning up cache directories..."
        rm -rf /var/cache/distiller-cm5-services 2>/dev/null || true
        
        # Clean up any potential runtime directories
        log "Cleaning up runtime directories..."
        rm -rf /var/run/distiller-cm5-services 2>/dev/null || true
        
        # Clean up any potential NetworkManager connections created by the service
        log "Cleaning up NetworkManager connections..."
        if command -v nmcli >/dev/null 2>&1; then
            # Remove any connections that might have been created by the service
            # This is a conservative approach - only remove if they match our naming pattern
            nmcli connection show | grep -E "(SetupWiFi|distiller)" | awk '{print $1}' | while read conn; do
                if [ -n "$conn" ]; then
                    log "Removing NetworkManager connection: $conn"
                    nmcli connection delete "$conn" 2>/dev/null || true
                fi
            done
        fi
        
        # Reload systemd daemon to ensure clean state
        if systemctl is-system-running >/dev/null 2>&1; then
            log "Reloading systemd daemon..."
            systemctl daemon-reload || true
            
            # Restart polkit to reload rules after removing permission files
            log "Restarting polkit to reload permission rules..."
            systemctl restart polkit 2>/dev/null || true
        fi
        
        log "Purge cleanup completed"
        ;;
    
    remove|upgrade|failed-upgrade|abort-install|abort-upgrade|disappear)
        log "Called with argument: $1"
        # For remove/upgrade, systemd services are handled by dh_installsystemd
        # We don't need to do additional cleanup here
        ;;
    
    *)
        log "Called with unknown argument: $1"
        echo "postrm called with unknown argument \`$1'" >&2
        exit 1
        ;;
esac

#DEBHELPER#

exit 0 